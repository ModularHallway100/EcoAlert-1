"use client";

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  MapPin,
  Activity,
  TrendingUp,
  AlertTriangle,
  Download,
  RefreshCw,
  Calendar,
  Clock,
  BarChart3,
  PieChart,
  LineChart
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useTrackFeature } from '@/components/analytics-provider';
import {
  PollutionDataPoint,
  PollutionHistory,
  MapSettings,
  DEFAULT_MAP_SETTINGS
} from '@/lib/pollution-types';

// Dynamically import PollutionHeatmap only on client side
const PollutionHeatmap = dynamic(
  () => import('@/components/pollution-heatmap'),
  {
    ssr: false,
    loading: () => (
      <div className="h-[700px] flex items-center justify-center bg-gray-100 dark:bg-gray-800 rounded-lg">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-2"></div>
          <p className="text-gray-600 dark:text-gray-300">Loading map...</p>
        </div>
      </div>
    )
  }
);

import dynamic from 'next/dynamic';

// Mock data for pollution history
const generateMockHistory = (): PollutionHistory[] => {
  const history: PollutionHistory[] = [];
  const now = new Date();
  
  for (let i = 29; i >= 0; i--) {
    const date = new Date(now);
    date.setDate(date.getDate() - i);
    
    const avgAQI = 60 + Math.sin(i / 3) * 30 + (Math.random() - 0.5) * 20;
    const maxAQI = avgAQI + 40 + Math.random() * 30;
    const minAQI = Math.max(20, avgAQI - 30 - Math.random() * 20);
    
    // Generate random data points for the day
    const dataPoints: PollutionDataPoint[] = [];
    for (let j = 0; j < 24; j++) {
      const hour = new Date(date);
      hour.setHours(j, 0, 0, 0);
      
      dataPoints.push({
        id: `day-${i}-hour-${j}`,
        location: { latitude: 40.7128 + (Math.random() - 0.5) * 0.1, longitude: -74.0060 + (Math.random() - 0.5) * 0.1 },
        aqi: Math.round(avgAQI + Math.sin(j / 3) * 20 + (Math.random() - 0.5) * 15),
        pm25: Math.round(avgAQI * 0.7 + (Math.random() - 0.5) * 10),
        pm10: Math.round(avgAQI * 0.9 + (Math.random() - 0.5) * 15),
        o3: Math.round(avgAQI * 0.5 + (Math.random() - 0.5) * 20),
        no2: Math.round(avgAQI * 0.6 + (Math.random() - 0.5) * 15),
        so2: Math.round(avgAQI * 0.2 + (Math.random() - 0.5) * 10),
        co: Math.round(avgAQI * 0.3 + (Math.random() - 0.5) * 15),
        timestamp: hour.toISOString(),
        source: 'simulated'
      });
    }
    
    // Determine dominant pollutant
    const pollutants = ['PM2.5', 'PM10', 'O3', 'NO2', 'SO2', 'CO'];
    const weights = dataPoints.map(p => 
      p.pm25 + p.pm10 + p.o3 + p.no2 + p.so2 + p.co
    );
    const totalWeight = weights.reduce((sum, w) => sum + w, 0);
    const dominantIndex = weights.reduce((maxIndex, weight, index, arr) => 
      weight > arr[maxIndex] ? index : maxIndex, 0
    );
    
    history.push({
      date: date.toISOString().split('T')[0],
      dataPoints,
      summary: {
        averageAQI: Math.round(avgAQI),
        maxAQI: Math.round(maxAQI),
        minAQI: Math.round(minAQI),
        dominantPollutant: pollutants[dominantIndex]
      }
    });
  }
  
  return history;
};

export default function PollutionMapPage() {
  const [pollutionData, setPollutionData] = useState<PollutionDataPoint[]>([]);
  const [historyData, setHistoryData] = useState<PollutionHistory[]>([]);
  const [mapSettings, setMapSettings] = useState<MapSettings>(DEFAULT_MAP_SETTINGS);
  const [selectedLocation, setSelectedLocation] = useState<{ latitude: number; longitude: number } | null>(null);
  const [selectedPollutionData, setSelectedPollutionData] = useState<PollutionDataPoint | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('map');
  
  const { toast } = useToast();
  const trackFeature = useTrackFeature('pollution-map');

  // Initialize data
  useEffect(() => {
    setIsLoading(true);
    
    // Simulate API calls
    setTimeout(() => {
      setPollutionData([]); // Will be generated by the PollutionHeatmap component
      setHistoryData(generateMockHistory());
      setIsLoading(false);
    }, 1000);
  }, []);

  const handleLocationSelect = (location: { latitude: number; longitude: number }) => {
    setSelectedLocation(location);
    trackFeature('location_selected', { location });
  };

  const handlePollutionDataSelect = (data: PollutionDataPoint) => {
    setSelectedPollutionData(data);
    trackFeature('pollution_data_selected', { aqi: data.aqi });
  };

  const handleExportData = () => {
    const dataStr = JSON.stringify({
      pollutionData,
      historyData,
      selectedLocation,
      selectedPollutionData,
      exportDate: new Date().toISOString()
    }, null, 2);
    
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `pollution-map-data-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Data Exported",
      description: "Pollution map data has been exported successfully.",
    });
    
    trackFeature('export_data');
  };

  const getAQIColor = (aqi: number): string => {
    if (aqi <= 50) return '#22c55e'; // Green
    if (aqi <= 100) return '#facc15'; // Yellow
    if (aqi <= 150) return '#f97316'; // Orange
    if (aqi <= 200) return '#ef4444'; // Red
    if (aqi <= 300) return '#a855f7'; // Purple
    return '#881337'; // Dark Red
  };

  const getAQILevel = (aqi: number): string => {
    if (aqi <= 50) return 'Good';
    if (aqi <= 100) return 'Moderate';
    if (aqi <= 150) return 'Unhealthy for Sensitive Groups';
    if (aqi <= 200) return 'Unhealthy';
    if (aqi <= 300) return 'Very Unhealthy';
    return 'Hazardous';
  };

  const getOverallTrend = (): 'improving' | 'stable' | 'deteriorating' => {
    if (historyData.length < 7) return 'stable';
    
    const recent = historyData.slice(-7);
    const older = historyData.slice(-14, -7);
    
    const recentAvg = recent.reduce((sum, day) => sum + day.summary.averageAQI, 0) / recent.length;
    const olderAvg = older.reduce((sum, day) => sum + day.summary.averageAQI, 0) / older.length;
    
    const difference = recentAvg - olderAvg;
    
    if (Math.abs(difference) < 5) return 'stable';
    return difference < -5 ? 'improving' : 'deteriorating';
  };

  const getTrendColor = (trend: string): string => {
    switch (trend) {
      case 'improving': return '#22c55e';
      case 'deteriorating': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'improving': return '↓';
      case 'deteriorating': return '↑';
      default: return '→';
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-300">Loading pollution map...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 dark:from-gray-900 dark:to-gray-800">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <div className="h-8 w-8 bg-green-600 rounded-full mr-3 flex items-center justify-center">
                <Activity className="h-5 w-5 text-white" />
              </div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                Pollution Heatmaps
              </h1>
            </div>
            
            <div className="flex items-center space-x-4">
              <Button onClick={handleExportData} variant="outline">
                <Download className="h-4 w-4 mr-2" />
                Export Data
              </Button>
              <Button variant="outline">
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Welcome Section */}
        <div className="mb-8">
          <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            Environmental Pollution Mapping
          </h2>
          <p className="text-gray-600 dark:text-gray-300">
            Monitor and visualize pollution levels across your area with real-time heatmaps and historical data analysis.
          </p>
        </div>

        {/* Stats Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Current AQI</CardTitle>
              <Activity className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold" style={{ color: getAQIColor(historyData[historyData.length - 1]?.summary.averageAQI || 0) }}>
                {historyData[historyData.length - 1]?.summary.averageAQI || '--'}
              </div>
              <p className="text-xs text-muted-foreground">
                {getAQILevel(historyData[historyData.length - 1]?.summary.averageAQI || 0)}
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">7-Day Trend</CardTitle>
              <TrendingUp className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold" style={{ color: getTrendColor(getOverallTrend()) }}>
                {getTrendIcon(getOverallTrend())}
              </div>
              <p className="text-xs text-muted-foreground capitalize">
                {getOverallTrend()}
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Max AQI (30d)</CardTitle>
              <AlertTriangle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">
                {Math.max(...historyData.map(h => h.summary.maxAQI)) || '--'}
              </div>
              <p className="text-xs text-muted-foreground">
                Peak level
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Data Points</CardTitle>
              <BarChart3 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {historyData.reduce((sum, day) => sum + day.dataPoints.length, 0).toLocaleString()}
              </div>
              <p className="text-xs text-muted-foreground">
                Total measurements
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Main Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="map">Interactive Map</TabsTrigger>
            <TabsTrigger value="history">Historical Data</TabsTrigger>
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="locations">Locations</TabsTrigger>
          </TabsList>

          <TabsContent value="map" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MapPin className="h-5 w-5 text-blue-500" />
                  Pollution Heatmap
                </CardTitle>
                <CardDescription>
                  Click on the map to explore specific locations and view detailed pollution data.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <PollutionHeatmap
                  height="700px"
                  onLocationSelect={handleLocationSelect}
                  onPollutionDataSelect={handlePollutionDataSelect}
                />
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="history" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="h-5 w-5 text-green-500" />
                  30-Day Pollution History
                </CardTitle>
                <CardDescription>
                  View historical pollution trends and patterns over the past month.
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {historyData.slice(-7).map((day, index) => (
                    <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <div className="font-medium">{new Date(day.date).toLocaleDateString()}</div>
                        <div className="text-sm text-gray-500">
                          {day.dataPoints.length} measurements
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="text-center">
                          <div className="text-lg font-bold" style={{ color: getAQIColor(day.summary.averageAQI) }}>
                            {day.summary.averageAQI}
                          </div>
                          <div className="text-xs text-gray-500">Avg AQI</div>
                        </div>
                        <div className="text-center">
                          <div className="text-lg font-bold text-red-600">
                            {day.summary.maxAQI}
                          </div>
                          <div className="text-xs text-gray-500">Max AQI</div>
                        </div>
                        <div className="text-center">
                          <div className="text-lg font-bold text-green-600">
                            {day.summary.minAQI}
                          </div>
                          <div className="text-xs text-gray-500">Min AQI</div>
                        </div>
                        <Badge variant="outline">
                          {day.summary.dominantPollutant}
                        </Badge>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="analytics" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <LineChart className="h-5 w-5 text-purple-500" />
                    AQI Trends
                  </CardTitle>
                  <CardDescription>
                    30-day average AQI trend analysis
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-64 flex items-center justify-center bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="text-center">
                      <LineChart className="h-12 w-12 mx-auto text-gray-400 mb-2" />
                      <p className="text-gray-500">AQI Trend Chart</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <PieChart className="h-5 w-5 text-orange-500" />
                    Pollutant Distribution
                  </CardTitle>
                  <CardDescription>
                    Distribution of pollutants over the past 30 days
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-64 flex items-center justify-center bg-gray-50 dark:bg-gray-800 rounded-lg">
                    <div className="text-center">
                      <PieChart className="h-12 w-12 mx-auto text-gray-400 mb-2" />
                      <p className="text-gray-500">Pollutant Distribution Chart</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-blue-500" />
                  Pollution Statistics
                </CardTitle>
                <CardDescription>
                  Detailed statistical analysis of pollution data
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-blue-600">
                      {Math.round(historyData.reduce((sum, day) => sum + day.summary.averageAQI, 0) / historyData.length) || '--'}
                    </div>
                    <div className="text-sm text-blue-700 dark:text-blue-300">Average AQI</div>
                  </div>
                  <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-red-600">
                      {Math.max(...historyData.map(h => h.summary.maxAQI)) || '--'}
                    </div>
                    <div className="text-sm text-red-700 dark:text-red-300">Peak AQI</div>
                  </div>
                  <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-green-600">
                      {Math.min(...historyData.map(h => h.summary.minAQI)) || '--'}
                    </div>
                    <div className="text-sm text-green-700 dark:text-green-300">Lowest AQI</div>
                  </div>
                  <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
                    <div className="text-2xl font-bold text-purple-600">
                      {historyData.filter(h => h.summary.averageAQI > 100).length || 0}
                    </div>
                    <div className="text-sm text-purple-700 dark:text-purple-300">High AQI Days</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="locations" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MapPin className="h-5 w-5 text-green-500" />
                  Monitored Locations
                </CardTitle>
                <CardDescription>
                  List of all monitored locations with current pollution levels
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {Array.from(new Set(pollutionData.map(p => 
                    `${p.location.latitude.toFixed(3)},${p.location.longitude.toFixed(3)}`
                  ))).slice(0, 10).map((locationStr, index) => {
                    const [lat, lng] = locationStr.split(',').map(Number);
                    const locationData = pollutionData.find(p => 
                      p.location.latitude === lat && p.location.longitude === lng
                    );
                    
                    return (
                      <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                        <div>
                          <div className="font-medium">
                            {lat.toFixed(4)}, {lng.toFixed(4)}
                          </div>
                          <div className="text-sm text-gray-500">
                            Last updated: {locationData ? new Date(locationData.timestamp).toLocaleTimeString() : 'N/A'}
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="text-center">
                            <div className="text-lg font-bold" style={{ color: getAQIColor(locationData?.aqi || 0) }}>
                              {locationData?.aqi || '--'}
                            </div>
                            <div className="text-xs text-gray-500">AQI</div>
                          </div>
                          <Badge variant={locationData?.aqi && locationData.aqi > 100 ? 'destructive' : 'outline'}>
                            {locationData ? getAQILevel(locationData.aqi) : 'No Data'}
                          </Badge>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}